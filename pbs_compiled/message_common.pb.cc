// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* WorkGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkGroupInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Filter_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fcommon_2eproto() {
  protobuf_AddDesc_message_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_common.proto");
  GOOGLE_CHECK(file != NULL);
  WorkGroupInfo_descriptor_ = file->message_type(0);
  static const int WorkGroupInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, workgroup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, workgroup_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, creator_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, access_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, invite_accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, key_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, encryption_algo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, encryption_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, creation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, deletion_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, creation_date_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, deletion_date_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, is_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, workgroup_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, workgroup_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, files_count_),
  };
  WorkGroupInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkGroupInfo_descriptor_,
      WorkGroupInfo::default_instance_,
      WorkGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkGroupInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkGroupInfo, _internal_metadata_),
      -1);
  Filter_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkGroupInfo_descriptor_, &WorkGroupInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fcommon_2eproto() {
  delete WorkGroupInfo::default_instance_;
  delete WorkGroupInfo_reflection_;
}

void protobuf_AddDesc_message_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024message_common.proto\022\003rpc\"\342\003\n\rWorkGrou"
    "pInfo\022\024\n\014workgroup_id\030\001 \001(\003\022\026\n\016workgroup"
    "_name\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\025\n\rcrea"
    "tor_login\030\004 \001(\t\022\023\n\013access_mode\030\005 \001(\003\022\027\n\017"
    "invite_accepted\030\010 \001(\010\022\013\n\003key\030\t \001(\t\022\025\n\rke"
    "y_signature\030\n \001(\t\022\020\n\010key_salt\030\013 \001(\t\022\027\n\017e"
    "ncryption_algo\030\014 \001(\005\022\027\n\017encryption_type\030"
    "\r \001(\005\022\014\n\004size\030\020 \001(\003\022\025\n\rcreation_date\030\021 \001"
    "(\003\022\025\n\rdeletion_date\030\022 \001(\003\022\031\n\021creation_da"
    "te_str\030\023 \001(\t\022\031\n\021deletion_date_str\030\024 \001(\t\022"
    "\022\n\nis_deleted\030\027 \001(\010\022\022\n\ncompany_id\030\030 \001(\003\022"
    "\026\n\016workgroup_type\030\031 \001(\005\022\032\n\022workgroup_met"
    "adata\030\032 \001(\t\022\023\n\013files_count\030\033 \001(\003*>\n\006Filt"
    "er\022\021\n\rEXISTING_ONLY\020\000\022\020\n\014DELETED_ONLY\020\001\022"
    "\017\n\013ALL_ENTRIES\020\002B\002H\001", 580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_common.proto", &protobuf_RegisterTypes);
  WorkGroupInfo::default_instance_ = new WorkGroupInfo();
  WorkGroupInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fcommon_2eproto {
  StaticDescriptorInitializer_message_5fcommon_2eproto() {
    protobuf_AddDesc_message_5fcommon_2eproto();
  }
} static_descriptor_initializer_message_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* Filter_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filter_descriptor_;
}
bool Filter_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkGroupInfo::kWorkgroupIdFieldNumber;
const int WorkGroupInfo::kWorkgroupNameFieldNumber;
const int WorkGroupInfo::kDescriptionFieldNumber;
const int WorkGroupInfo::kCreatorLoginFieldNumber;
const int WorkGroupInfo::kAccessModeFieldNumber;
const int WorkGroupInfo::kInviteAcceptedFieldNumber;
const int WorkGroupInfo::kKeyFieldNumber;
const int WorkGroupInfo::kKeySignatureFieldNumber;
const int WorkGroupInfo::kKeySaltFieldNumber;
const int WorkGroupInfo::kEncryptionAlgoFieldNumber;
const int WorkGroupInfo::kEncryptionTypeFieldNumber;
const int WorkGroupInfo::kSizeFieldNumber;
const int WorkGroupInfo::kCreationDateFieldNumber;
const int WorkGroupInfo::kDeletionDateFieldNumber;
const int WorkGroupInfo::kCreationDateStrFieldNumber;
const int WorkGroupInfo::kDeletionDateStrFieldNumber;
const int WorkGroupInfo::kIsDeletedFieldNumber;
const int WorkGroupInfo::kCompanyIdFieldNumber;
const int WorkGroupInfo::kWorkgroupTypeFieldNumber;
const int WorkGroupInfo::kWorkgroupMetadataFieldNumber;
const int WorkGroupInfo::kFilesCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkGroupInfo::WorkGroupInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpc.WorkGroupInfo)
}

void WorkGroupInfo::InitAsDefaultInstance() {
}

WorkGroupInfo::WorkGroupInfo(const WorkGroupInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rpc.WorkGroupInfo)
}

void WorkGroupInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  workgroup_id_ = GOOGLE_LONGLONG(0);
  workgroup_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_mode_ = GOOGLE_LONGLONG(0);
  invite_accepted_ = false;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryption_algo_ = 0;
  encryption_type_ = 0;
  size_ = GOOGLE_LONGLONG(0);
  creation_date_ = GOOGLE_LONGLONG(0);
  deletion_date_ = GOOGLE_LONGLONG(0);
  creation_date_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deletion_date_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_deleted_ = false;
  company_id_ = GOOGLE_LONGLONG(0);
  workgroup_type_ = 0;
  workgroup_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  files_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkGroupInfo::~WorkGroupInfo() {
  // @@protoc_insertion_point(destructor:rpc.WorkGroupInfo)
  SharedDtor();
}

void WorkGroupInfo::SharedDtor() {
  workgroup_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creation_date_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deletion_date_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workgroup_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WorkGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkGroupInfo_descriptor_;
}

const WorkGroupInfo& WorkGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fcommon_2eproto();
  return *default_instance_;
}

WorkGroupInfo* WorkGroupInfo::default_instance_ = NULL;

WorkGroupInfo* WorkGroupInfo::New(::google::protobuf::Arena* arena) const {
  WorkGroupInfo* n = new WorkGroupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkGroupInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorkGroupInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    workgroup_id_ = GOOGLE_LONGLONG(0);
    if (has_workgroup_name()) {
      workgroup_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_creator_login()) {
      creator_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    access_mode_ = GOOGLE_LONGLONG(0);
    invite_accepted_ = false;
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key_signature()) {
      key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(encryption_algo_, deletion_date_);
    if (has_key_salt()) {
      key_salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_creation_date_str()) {
      creation_date_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deletion_date_str()) {
      deletion_date_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(is_deleted_, workgroup_type_);
    company_id_ = GOOGLE_LONGLONG(0);
    if (has_workgroup_metadata()) {
      workgroup_metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    files_count_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpc.WorkGroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 workgroup_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &workgroup_id_)));
          set_has_workgroup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_workgroup_name;
        break;
      }

      // optional string workgroup_name = 2;
      case 2: {
        if (tag == 18) {
         parse_workgroup_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workgroup_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workgroup_name().data(), this->workgroup_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.workgroup_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creator_login;
        break;
      }

      // optional string creator_login = 4;
      case 4: {
        if (tag == 34) {
         parse_creator_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creator_login().data(), this->creator_login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.creator_login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_access_mode;
        break;
      }

      // optional int64 access_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_access_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &access_mode_)));
          set_has_access_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_invite_accepted;
        break;
      }

      // optional bool invite_accepted = 8;
      case 8: {
        if (tag == 64) {
         parse_invite_accepted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invite_accepted_)));
          set_has_invite_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_key;
        break;
      }

      // optional string key = 9;
      case 9: {
        if (tag == 74) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_key_signature;
        break;
      }

      // optional string key_signature = 10;
      case 10: {
        if (tag == 82) {
         parse_key_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_signature().data(), this->key_signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.key_signature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_key_salt;
        break;
      }

      // optional string key_salt = 11;
      case 11: {
        if (tag == 90) {
         parse_key_salt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_salt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_salt().data(), this->key_salt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.key_salt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_encryption_algo;
        break;
      }

      // optional int32 encryption_algo = 12;
      case 12: {
        if (tag == 96) {
         parse_encryption_algo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryption_algo_)));
          set_has_encryption_algo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_encryption_type;
        break;
      }

      // optional int32 encryption_type = 13;
      case 13: {
        if (tag == 104) {
         parse_encryption_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encryption_type_)));
          set_has_encryption_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_size;
        break;
      }

      // optional int64 size = 16;
      case 16: {
        if (tag == 128) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_creation_date;
        break;
      }

      // optional int64 creation_date = 17;
      case 17: {
        if (tag == 136) {
         parse_creation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_date_)));
          set_has_creation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_deletion_date;
        break;
      }

      // optional int64 deletion_date = 18;
      case 18: {
        if (tag == 144) {
         parse_deletion_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deletion_date_)));
          set_has_deletion_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_creation_date_str;
        break;
      }

      // optional string creation_date_str = 19;
      case 19: {
        if (tag == 154) {
         parse_creation_date_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creation_date_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creation_date_str().data(), this->creation_date_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.creation_date_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_deletion_date_str;
        break;
      }

      // optional string deletion_date_str = 20;
      case 20: {
        if (tag == 162) {
         parse_deletion_date_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deletion_date_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deletion_date_str().data(), this->deletion_date_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.deletion_date_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_is_deleted;
        break;
      }

      // optional bool is_deleted = 23;
      case 23: {
        if (tag == 184) {
         parse_is_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deleted_)));
          set_has_is_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_company_id;
        break;
      }

      // optional int64 company_id = 24;
      case 24: {
        if (tag == 192) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_workgroup_type;
        break;
      }

      // optional int32 workgroup_type = 25;
      case 25: {
        if (tag == 200) {
         parse_workgroup_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workgroup_type_)));
          set_has_workgroup_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_workgroup_metadata;
        break;
      }

      // optional string workgroup_metadata = 26;
      case 26: {
        if (tag == 210) {
         parse_workgroup_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workgroup_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workgroup_metadata().data(), this->workgroup_metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpc.WorkGroupInfo.workgroup_metadata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_files_count;
        break;
      }

      // optional int64 files_count = 27;
      case 27: {
        if (tag == 216) {
         parse_files_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &files_count_)));
          set_has_files_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpc.WorkGroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpc.WorkGroupInfo)
  return false;
#undef DO_
}

void WorkGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpc.WorkGroupInfo)
  // optional int64 workgroup_id = 1;
  if (has_workgroup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->workgroup_id(), output);
  }

  // optional string workgroup_name = 2;
  if (has_workgroup_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workgroup_name().data(), this->workgroup_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.workgroup_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->workgroup_name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string creator_login = 4;
  if (has_creator_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creator_login().data(), this->creator_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.creator_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->creator_login(), output);
  }

  // optional int64 access_mode = 5;
  if (has_access_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->access_mode(), output);
  }

  // optional bool invite_accepted = 8;
  if (has_invite_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->invite_accepted(), output);
  }

  // optional string key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->key(), output);
  }

  // optional string key_signature = 10;
  if (has_key_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_signature().data(), this->key_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.key_signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->key_signature(), output);
  }

  // optional string key_salt = 11;
  if (has_key_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_salt().data(), this->key_salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.key_salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->key_salt(), output);
  }

  // optional int32 encryption_algo = 12;
  if (has_encryption_algo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->encryption_algo(), output);
  }

  // optional int32 encryption_type = 13;
  if (has_encryption_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->encryption_type(), output);
  }

  // optional int64 size = 16;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->size(), output);
  }

  // optional int64 creation_date = 17;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->creation_date(), output);
  }

  // optional int64 deletion_date = 18;
  if (has_deletion_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->deletion_date(), output);
  }

  // optional string creation_date_str = 19;
  if (has_creation_date_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creation_date_str().data(), this->creation_date_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.creation_date_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->creation_date_str(), output);
  }

  // optional string deletion_date_str = 20;
  if (has_deletion_date_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deletion_date_str().data(), this->deletion_date_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.deletion_date_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->deletion_date_str(), output);
  }

  // optional bool is_deleted = 23;
  if (has_is_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_deleted(), output);
  }

  // optional int64 company_id = 24;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->company_id(), output);
  }

  // optional int32 workgroup_type = 25;
  if (has_workgroup_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->workgroup_type(), output);
  }

  // optional string workgroup_metadata = 26;
  if (has_workgroup_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workgroup_metadata().data(), this->workgroup_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.workgroup_metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->workgroup_metadata(), output);
  }

  // optional int64 files_count = 27;
  if (has_files_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->files_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpc.WorkGroupInfo)
}

::google::protobuf::uint8* WorkGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.WorkGroupInfo)
  // optional int64 workgroup_id = 1;
  if (has_workgroup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->workgroup_id(), target);
  }

  // optional string workgroup_name = 2;
  if (has_workgroup_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workgroup_name().data(), this->workgroup_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.workgroup_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->workgroup_name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string creator_login = 4;
  if (has_creator_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creator_login().data(), this->creator_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.creator_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->creator_login(), target);
  }

  // optional int64 access_mode = 5;
  if (has_access_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->access_mode(), target);
  }

  // optional bool invite_accepted = 8;
  if (has_invite_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->invite_accepted(), target);
  }

  // optional string key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->key(), target);
  }

  // optional string key_signature = 10;
  if (has_key_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_signature().data(), this->key_signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.key_signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->key_signature(), target);
  }

  // optional string key_salt = 11;
  if (has_key_salt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_salt().data(), this->key_salt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.key_salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->key_salt(), target);
  }

  // optional int32 encryption_algo = 12;
  if (has_encryption_algo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->encryption_algo(), target);
  }

  // optional int32 encryption_type = 13;
  if (has_encryption_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->encryption_type(), target);
  }

  // optional int64 size = 16;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->size(), target);
  }

  // optional int64 creation_date = 17;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->creation_date(), target);
  }

  // optional int64 deletion_date = 18;
  if (has_deletion_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->deletion_date(), target);
  }

  // optional string creation_date_str = 19;
  if (has_creation_date_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creation_date_str().data(), this->creation_date_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.creation_date_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->creation_date_str(), target);
  }

  // optional string deletion_date_str = 20;
  if (has_deletion_date_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deletion_date_str().data(), this->deletion_date_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.deletion_date_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->deletion_date_str(), target);
  }

  // optional bool is_deleted = 23;
  if (has_is_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_deleted(), target);
  }

  // optional int64 company_id = 24;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->company_id(), target);
  }

  // optional int32 workgroup_type = 25;
  if (has_workgroup_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->workgroup_type(), target);
  }

  // optional string workgroup_metadata = 26;
  if (has_workgroup_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workgroup_metadata().data(), this->workgroup_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpc.WorkGroupInfo.workgroup_metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->workgroup_metadata(), target);
  }

  // optional int64 files_count = 27;
  if (has_files_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->files_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.WorkGroupInfo)
  return target;
}

int WorkGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 workgroup_id = 1;
    if (has_workgroup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->workgroup_id());
    }

    // optional string workgroup_name = 2;
    if (has_workgroup_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workgroup_name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string creator_login = 4;
    if (has_creator_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_login());
    }

    // optional int64 access_mode = 5;
    if (has_access_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->access_mode());
    }

    // optional bool invite_accepted = 8;
    if (has_invite_accepted()) {
      total_size += 1 + 1;
    }

    // optional string key = 9;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string key_signature = 10;
    if (has_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_signature());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string key_salt = 11;
    if (has_key_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_salt());
    }

    // optional int32 encryption_algo = 12;
    if (has_encryption_algo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encryption_algo());
    }

    // optional int32 encryption_type = 13;
    if (has_encryption_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encryption_type());
    }

    // optional int64 size = 16;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional int64 creation_date = 17;
    if (has_creation_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_date());
    }

    // optional int64 deletion_date = 18;
    if (has_deletion_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deletion_date());
    }

    // optional string creation_date_str = 19;
    if (has_creation_date_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creation_date_str());
    }

    // optional string deletion_date_str = 20;
    if (has_deletion_date_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deletion_date_str());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional bool is_deleted = 23;
    if (has_is_deleted()) {
      total_size += 2 + 1;
    }

    // optional int64 company_id = 24;
    if (has_company_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }

    // optional int32 workgroup_type = 25;
    if (has_workgroup_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workgroup_type());
    }

    // optional string workgroup_metadata = 26;
    if (has_workgroup_metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workgroup_metadata());
    }

    // optional int64 files_count = 27;
    if (has_files_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->files_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WorkGroupInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkGroupInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkGroupInfo::MergeFrom(const WorkGroupInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workgroup_id()) {
      set_workgroup_id(from.workgroup_id());
    }
    if (from.has_workgroup_name()) {
      set_has_workgroup_name();
      workgroup_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workgroup_name_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_creator_login()) {
      set_has_creator_login();
      creator_login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_login_);
    }
    if (from.has_access_mode()) {
      set_access_mode(from.access_mode());
    }
    if (from.has_invite_accepted()) {
      set_invite_accepted(from.invite_accepted());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_key_signature()) {
      set_has_key_signature();
      key_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_signature_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_key_salt()) {
      set_has_key_salt();
      key_salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_salt_);
    }
    if (from.has_encryption_algo()) {
      set_encryption_algo(from.encryption_algo());
    }
    if (from.has_encryption_type()) {
      set_encryption_type(from.encryption_type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_creation_date()) {
      set_creation_date(from.creation_date());
    }
    if (from.has_deletion_date()) {
      set_deletion_date(from.deletion_date());
    }
    if (from.has_creation_date_str()) {
      set_has_creation_date_str();
      creation_date_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creation_date_str_);
    }
    if (from.has_deletion_date_str()) {
      set_has_deletion_date_str();
      deletion_date_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deletion_date_str_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_deleted()) {
      set_is_deleted(from.is_deleted());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_workgroup_type()) {
      set_workgroup_type(from.workgroup_type());
    }
    if (from.has_workgroup_metadata()) {
      set_has_workgroup_metadata();
      workgroup_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workgroup_metadata_);
    }
    if (from.has_files_count()) {
      set_files_count(from.files_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkGroupInfo::CopyFrom(const WorkGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkGroupInfo::IsInitialized() const {

  return true;
}

void WorkGroupInfo::Swap(WorkGroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkGroupInfo::InternalSwap(WorkGroupInfo* other) {
  std::swap(workgroup_id_, other->workgroup_id_);
  workgroup_name_.Swap(&other->workgroup_name_);
  description_.Swap(&other->description_);
  creator_login_.Swap(&other->creator_login_);
  std::swap(access_mode_, other->access_mode_);
  std::swap(invite_accepted_, other->invite_accepted_);
  key_.Swap(&other->key_);
  key_signature_.Swap(&other->key_signature_);
  key_salt_.Swap(&other->key_salt_);
  std::swap(encryption_algo_, other->encryption_algo_);
  std::swap(encryption_type_, other->encryption_type_);
  std::swap(size_, other->size_);
  std::swap(creation_date_, other->creation_date_);
  std::swap(deletion_date_, other->deletion_date_);
  creation_date_str_.Swap(&other->creation_date_str_);
  deletion_date_str_.Swap(&other->deletion_date_str_);
  std::swap(is_deleted_, other->is_deleted_);
  std::swap(company_id_, other->company_id_);
  std::swap(workgroup_type_, other->workgroup_type_);
  workgroup_metadata_.Swap(&other->workgroup_metadata_);
  std::swap(files_count_, other->files_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkGroupInfo_descriptor_;
  metadata.reflection = WorkGroupInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkGroupInfo

// optional int64 workgroup_id = 1;
bool WorkGroupInfo::has_workgroup_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorkGroupInfo::set_has_workgroup_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WorkGroupInfo::clear_has_workgroup_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorkGroupInfo::clear_workgroup_id() {
  workgroup_id_ = GOOGLE_LONGLONG(0);
  clear_has_workgroup_id();
}
 ::google::protobuf::int64 WorkGroupInfo::workgroup_id() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.workgroup_id)
  return workgroup_id_;
}
 void WorkGroupInfo::set_workgroup_id(::google::protobuf::int64 value) {
  set_has_workgroup_id();
  workgroup_id_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.workgroup_id)
}

// optional string workgroup_name = 2;
bool WorkGroupInfo::has_workgroup_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WorkGroupInfo::set_has_workgroup_name() {
  _has_bits_[0] |= 0x00000002u;
}
void WorkGroupInfo::clear_has_workgroup_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void WorkGroupInfo::clear_workgroup_name() {
  workgroup_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_workgroup_name();
}
 const ::std::string& WorkGroupInfo::workgroup_name() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.workgroup_name)
  return workgroup_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_workgroup_name(const ::std::string& value) {
  set_has_workgroup_name();
  workgroup_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.workgroup_name)
}
 void WorkGroupInfo::set_workgroup_name(const char* value) {
  set_has_workgroup_name();
  workgroup_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.workgroup_name)
}
 void WorkGroupInfo::set_workgroup_name(const char* value, size_t size) {
  set_has_workgroup_name();
  workgroup_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.workgroup_name)
}
 ::std::string* WorkGroupInfo::mutable_workgroup_name() {
  set_has_workgroup_name();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.workgroup_name)
  return workgroup_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_workgroup_name() {
  clear_has_workgroup_name();
  return workgroup_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_workgroup_name(::std::string* workgroup_name) {
  if (workgroup_name != NULL) {
    set_has_workgroup_name();
  } else {
    clear_has_workgroup_name();
  }
  workgroup_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workgroup_name);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.workgroup_name)
}

// optional string description = 3;
bool WorkGroupInfo::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WorkGroupInfo::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
void WorkGroupInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void WorkGroupInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& WorkGroupInfo::description() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.description)
}
 void WorkGroupInfo::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.description)
}
 void WorkGroupInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.description)
}
 ::std::string* WorkGroupInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_description() {
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.description)
}

// optional string creator_login = 4;
bool WorkGroupInfo::has_creator_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WorkGroupInfo::set_has_creator_login() {
  _has_bits_[0] |= 0x00000008u;
}
void WorkGroupInfo::clear_has_creator_login() {
  _has_bits_[0] &= ~0x00000008u;
}
void WorkGroupInfo::clear_creator_login() {
  creator_login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creator_login();
}
 const ::std::string& WorkGroupInfo::creator_login() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.creator_login)
  return creator_login_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_creator_login(const ::std::string& value) {
  set_has_creator_login();
  creator_login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.creator_login)
}
 void WorkGroupInfo::set_creator_login(const char* value) {
  set_has_creator_login();
  creator_login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.creator_login)
}
 void WorkGroupInfo::set_creator_login(const char* value, size_t size) {
  set_has_creator_login();
  creator_login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.creator_login)
}
 ::std::string* WorkGroupInfo::mutable_creator_login() {
  set_has_creator_login();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.creator_login)
  return creator_login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_creator_login() {
  clear_has_creator_login();
  return creator_login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_creator_login(::std::string* creator_login) {
  if (creator_login != NULL) {
    set_has_creator_login();
  } else {
    clear_has_creator_login();
  }
  creator_login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_login);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.creator_login)
}

// optional int64 access_mode = 5;
bool WorkGroupInfo::has_access_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WorkGroupInfo::set_has_access_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void WorkGroupInfo::clear_has_access_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void WorkGroupInfo::clear_access_mode() {
  access_mode_ = GOOGLE_LONGLONG(0);
  clear_has_access_mode();
}
 ::google::protobuf::int64 WorkGroupInfo::access_mode() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.access_mode)
  return access_mode_;
}
 void WorkGroupInfo::set_access_mode(::google::protobuf::int64 value) {
  set_has_access_mode();
  access_mode_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.access_mode)
}

// optional bool invite_accepted = 8;
bool WorkGroupInfo::has_invite_accepted() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WorkGroupInfo::set_has_invite_accepted() {
  _has_bits_[0] |= 0x00000020u;
}
void WorkGroupInfo::clear_has_invite_accepted() {
  _has_bits_[0] &= ~0x00000020u;
}
void WorkGroupInfo::clear_invite_accepted() {
  invite_accepted_ = false;
  clear_has_invite_accepted();
}
 bool WorkGroupInfo::invite_accepted() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.invite_accepted)
  return invite_accepted_;
}
 void WorkGroupInfo::set_invite_accepted(bool value) {
  set_has_invite_accepted();
  invite_accepted_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.invite_accepted)
}

// optional string key = 9;
bool WorkGroupInfo::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WorkGroupInfo::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
void WorkGroupInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
void WorkGroupInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& WorkGroupInfo::key() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.key)
}
 void WorkGroupInfo::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.key)
}
 void WorkGroupInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.key)
}
 ::std::string* WorkGroupInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.key)
}

// optional string key_signature = 10;
bool WorkGroupInfo::has_key_signature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WorkGroupInfo::set_has_key_signature() {
  _has_bits_[0] |= 0x00000080u;
}
void WorkGroupInfo::clear_has_key_signature() {
  _has_bits_[0] &= ~0x00000080u;
}
void WorkGroupInfo::clear_key_signature() {
  key_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_signature();
}
 const ::std::string& WorkGroupInfo::key_signature() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.key_signature)
  return key_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_key_signature(const ::std::string& value) {
  set_has_key_signature();
  key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.key_signature)
}
 void WorkGroupInfo::set_key_signature(const char* value) {
  set_has_key_signature();
  key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.key_signature)
}
 void WorkGroupInfo::set_key_signature(const char* value, size_t size) {
  set_has_key_signature();
  key_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.key_signature)
}
 ::std::string* WorkGroupInfo::mutable_key_signature() {
  set_has_key_signature();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.key_signature)
  return key_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_key_signature() {
  clear_has_key_signature();
  return key_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_key_signature(::std::string* key_signature) {
  if (key_signature != NULL) {
    set_has_key_signature();
  } else {
    clear_has_key_signature();
  }
  key_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_signature);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.key_signature)
}

// optional string key_salt = 11;
bool WorkGroupInfo::has_key_salt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WorkGroupInfo::set_has_key_salt() {
  _has_bits_[0] |= 0x00000100u;
}
void WorkGroupInfo::clear_has_key_salt() {
  _has_bits_[0] &= ~0x00000100u;
}
void WorkGroupInfo::clear_key_salt() {
  key_salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_salt();
}
 const ::std::string& WorkGroupInfo::key_salt() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.key_salt)
  return key_salt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_key_salt(const ::std::string& value) {
  set_has_key_salt();
  key_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.key_salt)
}
 void WorkGroupInfo::set_key_salt(const char* value) {
  set_has_key_salt();
  key_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.key_salt)
}
 void WorkGroupInfo::set_key_salt(const char* value, size_t size) {
  set_has_key_salt();
  key_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.key_salt)
}
 ::std::string* WorkGroupInfo::mutable_key_salt() {
  set_has_key_salt();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.key_salt)
  return key_salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_key_salt() {
  clear_has_key_salt();
  return key_salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_key_salt(::std::string* key_salt) {
  if (key_salt != NULL) {
    set_has_key_salt();
  } else {
    clear_has_key_salt();
  }
  key_salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_salt);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.key_salt)
}

// optional int32 encryption_algo = 12;
bool WorkGroupInfo::has_encryption_algo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WorkGroupInfo::set_has_encryption_algo() {
  _has_bits_[0] |= 0x00000200u;
}
void WorkGroupInfo::clear_has_encryption_algo() {
  _has_bits_[0] &= ~0x00000200u;
}
void WorkGroupInfo::clear_encryption_algo() {
  encryption_algo_ = 0;
  clear_has_encryption_algo();
}
 ::google::protobuf::int32 WorkGroupInfo::encryption_algo() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.encryption_algo)
  return encryption_algo_;
}
 void WorkGroupInfo::set_encryption_algo(::google::protobuf::int32 value) {
  set_has_encryption_algo();
  encryption_algo_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.encryption_algo)
}

// optional int32 encryption_type = 13;
bool WorkGroupInfo::has_encryption_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WorkGroupInfo::set_has_encryption_type() {
  _has_bits_[0] |= 0x00000400u;
}
void WorkGroupInfo::clear_has_encryption_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void WorkGroupInfo::clear_encryption_type() {
  encryption_type_ = 0;
  clear_has_encryption_type();
}
 ::google::protobuf::int32 WorkGroupInfo::encryption_type() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.encryption_type)
  return encryption_type_;
}
 void WorkGroupInfo::set_encryption_type(::google::protobuf::int32 value) {
  set_has_encryption_type();
  encryption_type_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.encryption_type)
}

// optional int64 size = 16;
bool WorkGroupInfo::has_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WorkGroupInfo::set_has_size() {
  _has_bits_[0] |= 0x00000800u;
}
void WorkGroupInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void WorkGroupInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::int64 WorkGroupInfo::size() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.size)
  return size_;
}
 void WorkGroupInfo::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.size)
}

// optional int64 creation_date = 17;
bool WorkGroupInfo::has_creation_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void WorkGroupInfo::set_has_creation_date() {
  _has_bits_[0] |= 0x00001000u;
}
void WorkGroupInfo::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00001000u;
}
void WorkGroupInfo::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
  clear_has_creation_date();
}
 ::google::protobuf::int64 WorkGroupInfo::creation_date() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.creation_date)
  return creation_date_;
}
 void WorkGroupInfo::set_creation_date(::google::protobuf::int64 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.creation_date)
}

// optional int64 deletion_date = 18;
bool WorkGroupInfo::has_deletion_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void WorkGroupInfo::set_has_deletion_date() {
  _has_bits_[0] |= 0x00002000u;
}
void WorkGroupInfo::clear_has_deletion_date() {
  _has_bits_[0] &= ~0x00002000u;
}
void WorkGroupInfo::clear_deletion_date() {
  deletion_date_ = GOOGLE_LONGLONG(0);
  clear_has_deletion_date();
}
 ::google::protobuf::int64 WorkGroupInfo::deletion_date() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.deletion_date)
  return deletion_date_;
}
 void WorkGroupInfo::set_deletion_date(::google::protobuf::int64 value) {
  set_has_deletion_date();
  deletion_date_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.deletion_date)
}

// optional string creation_date_str = 19;
bool WorkGroupInfo::has_creation_date_str() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void WorkGroupInfo::set_has_creation_date_str() {
  _has_bits_[0] |= 0x00004000u;
}
void WorkGroupInfo::clear_has_creation_date_str() {
  _has_bits_[0] &= ~0x00004000u;
}
void WorkGroupInfo::clear_creation_date_str() {
  creation_date_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creation_date_str();
}
 const ::std::string& WorkGroupInfo::creation_date_str() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.creation_date_str)
  return creation_date_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_creation_date_str(const ::std::string& value) {
  set_has_creation_date_str();
  creation_date_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.creation_date_str)
}
 void WorkGroupInfo::set_creation_date_str(const char* value) {
  set_has_creation_date_str();
  creation_date_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.creation_date_str)
}
 void WorkGroupInfo::set_creation_date_str(const char* value, size_t size) {
  set_has_creation_date_str();
  creation_date_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.creation_date_str)
}
 ::std::string* WorkGroupInfo::mutable_creation_date_str() {
  set_has_creation_date_str();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.creation_date_str)
  return creation_date_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_creation_date_str() {
  clear_has_creation_date_str();
  return creation_date_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_creation_date_str(::std::string* creation_date_str) {
  if (creation_date_str != NULL) {
    set_has_creation_date_str();
  } else {
    clear_has_creation_date_str();
  }
  creation_date_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creation_date_str);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.creation_date_str)
}

// optional string deletion_date_str = 20;
bool WorkGroupInfo::has_deletion_date_str() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void WorkGroupInfo::set_has_deletion_date_str() {
  _has_bits_[0] |= 0x00008000u;
}
void WorkGroupInfo::clear_has_deletion_date_str() {
  _has_bits_[0] &= ~0x00008000u;
}
void WorkGroupInfo::clear_deletion_date_str() {
  deletion_date_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deletion_date_str();
}
 const ::std::string& WorkGroupInfo::deletion_date_str() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.deletion_date_str)
  return deletion_date_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_deletion_date_str(const ::std::string& value) {
  set_has_deletion_date_str();
  deletion_date_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.deletion_date_str)
}
 void WorkGroupInfo::set_deletion_date_str(const char* value) {
  set_has_deletion_date_str();
  deletion_date_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.deletion_date_str)
}
 void WorkGroupInfo::set_deletion_date_str(const char* value, size_t size) {
  set_has_deletion_date_str();
  deletion_date_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.deletion_date_str)
}
 ::std::string* WorkGroupInfo::mutable_deletion_date_str() {
  set_has_deletion_date_str();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.deletion_date_str)
  return deletion_date_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_deletion_date_str() {
  clear_has_deletion_date_str();
  return deletion_date_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_deletion_date_str(::std::string* deletion_date_str) {
  if (deletion_date_str != NULL) {
    set_has_deletion_date_str();
  } else {
    clear_has_deletion_date_str();
  }
  deletion_date_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deletion_date_str);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.deletion_date_str)
}

// optional bool is_deleted = 23;
bool WorkGroupInfo::has_is_deleted() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void WorkGroupInfo::set_has_is_deleted() {
  _has_bits_[0] |= 0x00010000u;
}
void WorkGroupInfo::clear_has_is_deleted() {
  _has_bits_[0] &= ~0x00010000u;
}
void WorkGroupInfo::clear_is_deleted() {
  is_deleted_ = false;
  clear_has_is_deleted();
}
 bool WorkGroupInfo::is_deleted() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.is_deleted)
  return is_deleted_;
}
 void WorkGroupInfo::set_is_deleted(bool value) {
  set_has_is_deleted();
  is_deleted_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.is_deleted)
}

// optional int64 company_id = 24;
bool WorkGroupInfo::has_company_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void WorkGroupInfo::set_has_company_id() {
  _has_bits_[0] |= 0x00020000u;
}
void WorkGroupInfo::clear_has_company_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void WorkGroupInfo::clear_company_id() {
  company_id_ = GOOGLE_LONGLONG(0);
  clear_has_company_id();
}
 ::google::protobuf::int64 WorkGroupInfo::company_id() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.company_id)
  return company_id_;
}
 void WorkGroupInfo::set_company_id(::google::protobuf::int64 value) {
  set_has_company_id();
  company_id_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.company_id)
}

// optional int32 workgroup_type = 25;
bool WorkGroupInfo::has_workgroup_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void WorkGroupInfo::set_has_workgroup_type() {
  _has_bits_[0] |= 0x00040000u;
}
void WorkGroupInfo::clear_has_workgroup_type() {
  _has_bits_[0] &= ~0x00040000u;
}
void WorkGroupInfo::clear_workgroup_type() {
  workgroup_type_ = 0;
  clear_has_workgroup_type();
}
 ::google::protobuf::int32 WorkGroupInfo::workgroup_type() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.workgroup_type)
  return workgroup_type_;
}
 void WorkGroupInfo::set_workgroup_type(::google::protobuf::int32 value) {
  set_has_workgroup_type();
  workgroup_type_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.workgroup_type)
}

// optional string workgroup_metadata = 26;
bool WorkGroupInfo::has_workgroup_metadata() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void WorkGroupInfo::set_has_workgroup_metadata() {
  _has_bits_[0] |= 0x00080000u;
}
void WorkGroupInfo::clear_has_workgroup_metadata() {
  _has_bits_[0] &= ~0x00080000u;
}
void WorkGroupInfo::clear_workgroup_metadata() {
  workgroup_metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_workgroup_metadata();
}
 const ::std::string& WorkGroupInfo::workgroup_metadata() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.workgroup_metadata)
  return workgroup_metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_workgroup_metadata(const ::std::string& value) {
  set_has_workgroup_metadata();
  workgroup_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.workgroup_metadata)
}
 void WorkGroupInfo::set_workgroup_metadata(const char* value) {
  set_has_workgroup_metadata();
  workgroup_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.WorkGroupInfo.workgroup_metadata)
}
 void WorkGroupInfo::set_workgroup_metadata(const char* value, size_t size) {
  set_has_workgroup_metadata();
  workgroup_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.WorkGroupInfo.workgroup_metadata)
}
 ::std::string* WorkGroupInfo::mutable_workgroup_metadata() {
  set_has_workgroup_metadata();
  // @@protoc_insertion_point(field_mutable:rpc.WorkGroupInfo.workgroup_metadata)
  return workgroup_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorkGroupInfo::release_workgroup_metadata() {
  clear_has_workgroup_metadata();
  return workgroup_metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorkGroupInfo::set_allocated_workgroup_metadata(::std::string* workgroup_metadata) {
  if (workgroup_metadata != NULL) {
    set_has_workgroup_metadata();
  } else {
    clear_has_workgroup_metadata();
  }
  workgroup_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workgroup_metadata);
  // @@protoc_insertion_point(field_set_allocated:rpc.WorkGroupInfo.workgroup_metadata)
}

// optional int64 files_count = 27;
bool WorkGroupInfo::has_files_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void WorkGroupInfo::set_has_files_count() {
  _has_bits_[0] |= 0x00100000u;
}
void WorkGroupInfo::clear_has_files_count() {
  _has_bits_[0] &= ~0x00100000u;
}
void WorkGroupInfo::clear_files_count() {
  files_count_ = GOOGLE_LONGLONG(0);
  clear_has_files_count();
}
 ::google::protobuf::int64 WorkGroupInfo::files_count() const {
  // @@protoc_insertion_point(field_get:rpc.WorkGroupInfo.files_count)
  return files_count_;
}
 void WorkGroupInfo::set_files_count(::google::protobuf::int64 value) {
  set_has_files_count();
  files_count_ = value;
  // @@protoc_insertion_point(field_set:rpc.WorkGroupInfo.files_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
